name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    # Install dependencies
    - name: Install dependencies
      run: npm install

    # Build the app
    - name: Build app
      run: npm run build

    # Run tests
    - name: Run tests
      run: npm run test

    # Authenticate with ECR
    - name: Login to ECR
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Authenticate Docker with ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URL }}

    - name: Build and tag the Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_URL }}:latest ../../

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY_URL }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Deploy to AWS
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.ECR_REPOSITORY_URL }}:latest
          docker stop web || true # Stop existing container (if any)
          docker rm web || true   # Remove existing container (if any)
          docker run -d -p 3000:3000 --name web ${{ secrets.ECR_REPOSITORY_URL }}:latest
