name: CI/CD Pipeline

#on:
#  push:
#    branches:
#      - main   # Trigger workflow on push to the main branch
on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    # Install dependencies
    - name: Install dependencies
      run: npm install

    # Build the app
    - name: Build app
      run: npm run build

    # Run tests
    - name: Run tests
      run: npm run test

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build and tag the Docker image
      run: |
        docker build -t login-service-api .

    - name: Login to ECR (if using AWS ECR)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION}}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URL }}

    - name: Push to ECR
      run: |
        docker push login-service-api

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Add SSH key
    #- name: Add SSH key
    #  run: |
    #    mkdir -p ~/.ssh
    #    echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
    #    chmod 600 ~/.ssh/id_rsa

    # Deploy to AWS
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull login-service-api
          docker stop web # Stop existing container (if any)
          docker rm web # Remove existing container (if any)
          docker run -d -p 3000:3000 login-service-api # Assuming your Node.js app listens on port 3000
          # Restart the application with PM2
          # pm2 start dist/index.js --name "login-service" || pm2 restart "login-service"
          # pm2 save
